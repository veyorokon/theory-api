"""
Django settings for punqit project.

Generated by 'django-admin startproject' using Django 4.2.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""

import os
import sys
from pathlib import Path


def environ_setting(name, default=None, isNoneAllowed=False):
    """
    Fetch setting from the environment- if not found, then this setting is
    ImproperlyConfigured.
    """
    if name not in os.environ and default is None and not isNoneAllowed:
        from django.core.exceptions import ImproperlyConfigured

        raise ImproperlyConfigured(f"The {name} ENVVAR is not set.")

    return os.environ.get(name, default)


def env(name, default=None, required=False, cast=str):
    """
    Fetch setting from environment with optional type casting.

    Args:
        name: Environment variable name
        default: Default value if not set
        required: Raise ImproperlyConfigured if not set and no default
        cast: Type to cast value to (str, bool, int, etc.)
    """
    v = os.getenv(name, default)
    if required and v is None:
        from django.core.exceptions import ImproperlyConfigured

        raise ImproperlyConfigured(f"The {name} ENVVAR is not set.")

    if v is not None and cast is not str:
        if cast is bool:
            return str(v).lower() in ("1", "true", "t", "yes", "y", "on")
        return cast(v)
    return v


# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent.parent
sys.path.insert(0, BASE_DIR)
sys.path.insert(0, os.path.join(BASE_DIR, "apps"))

# Tool roots (outside Django apps - formerly processors)
TOOLS_ROOTS = [
    BASE_DIR.parent / "tools",
]
# Override: TOOLS_EXTRA_ROOTS=/vendor/tools,/builds/tools
extra_roots = os.getenv("TOOLS_EXTRA_ROOTS", "")
if extra_roots:
    TOOLS_ROOTS.extend([Path(p.strip()) for p in extra_roots.split(",") if p.strip()])
# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
# SECRET_KEY is set in environment-specific settings files

# Application definition
AUTH_USER_MODEL = "core.User"

LOCAL_APPS = [
    "apps.core",
    "apps.agents",
    "apps.worlds",
    "apps.tools",
    "apps.plans",
    "apps.goals",
    "apps.runs",
    "apps.billing",
]
THIRD_PARTY_APPS = [
    "rest_framework",
    "strawberry.django",
]
DJANGO_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
]
INSTALLED_APPS = DJANGO_APPS + THIRD_PARTY_APPS + LOCAL_APPS

MIDDLEWARE = [
    "apps.core.middleware.request_id.RequestIdMiddleware",
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

ROOT_URLCONF = "backend.urls"
TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "backend.wsgi.application"
ASGI_APPLICATION = "backend.asgi.application"

# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]

# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_TZ = True

# API KEYS
OPENAI_API_KEY = environ_setting("OPENAI_API_KEY", isNoneAllowed=True)

# Ensure your site uses the same domain settings in cookies
CSRF_COOKIE_DOMAIN = None  # Set this if you're having issues with subdomains
SESSION_COOKIE_DOMAIN = None  # Set this if you're having issues with subdomains

# Secure cookies settings
CSRF_COOKIE_SECURE = False  # Set to True in production with HTTPS
SESSION_COOKIE_SECURE = False  # Set to True in production with HTTPS


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/

STATIC_URL = "static/"

# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"


# Agent defaults
DEFAULT_AGENT_BUDGET_MICRO = 1_000_000  # 1M micro-units
DEFAULT_AGENT_CONCURRENCY = 5

LLM_SETTINGS = {
    "default_model": env("LLM_MODEL_DEFAULT", "openai/gpt-4o-mini"),
    "api_base": env("LLM_API_BASE", ""),
}

# Storage configuration (12-factor pattern)
STORAGE_BACKEND = env("STORAGE_BACKEND", "minio")
ARTIFACTS_BUCKET = env("ARTIFACTS_BUCKET", "theory-artifacts-dev")
ARTIFACTS_REGION = env("ARTIFACTS_REGION", "us-east-1")

STORAGE = {
    "BACKEND": STORAGE_BACKEND,
    "BUCKET": ARTIFACTS_BUCKET,
    "REGION": ARTIFACTS_REGION,
    "MINIO": {
        "ENDPOINT": env("MINIO_STORAGE_ENDPOINT", "minio.local:9000"),
        "ACCESS_KEY": env("MINIO_STORAGE_ACCESS_KEY", "minioadmin"),
        "SECRET_KEY": env("MINIO_STORAGE_SECRET_KEY", "minioadmin"),
        "USE_HTTPS": env("MINIO_STORAGE_USE_HTTPS", "false", cast=bool),
    },
}

# Note: We use StorageService directly, not Django's file storage backend
# If Django file fields are needed, configure DEFAULT_FILE_STORAGE appropriately

# Feature flags
# Modal adapter gating comes from Django settings (not raw env var). Map envâ†’setting here.
MODAL_ENABLED = os.environ.get("MODAL_ENABLED", "false").lower() == "true"
# Modal environment name for Function.from_name(..., environment_name=...)
MODAL_ENVIRONMENT = os.environ.get("MODAL_ENVIRONMENT", "").strip() or "dev"
# Stable Modal app name (module uses this); env is selected at deploy/invoke time
MODAL_APP_NAME = os.environ.get("MODAL_APP_NAME", "theory-rt")

# Lease management feature flag
LEASES_ENABLED = False

# Django Management Commands configuration
# Enable discovery of commands in subdirectories
MANAGEMENT_COMMANDS_SUBMODULES = [
    "management.commands.processors",
    "management.commands.modal",
    "management.commands.docs",
]
