name: Staging Lane

on:
  push:
    branches: [ staging ]
    paths-ignore:
      - "tools/**/registry.yaml"  # Ignore pin commits
  workflow_dispatch: {}

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  MODAL_ENVIRONMENT: staging

jobs:
  deploy-and-test:
    name: Deploy to Modal (staging) and test
    runs-on: ubuntu-latest
    timeout-minutes: 30
    env:
      DJANGO_SETTINGS_MODULE: backend.settings.staging
      ADAPTER: modal
      ENV: staging
      PLATFORM: amd64
      MODAL_ENVIRONMENT: staging
      TEST_ADAPTER: modal
      MOCK_MISSING_SECRETS: false
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with: { python-version: "3.11" }
      - run: pip install -r requirements.txt -r requirements-dev.txt
      - run: cd code && python manage.py migrate --noinput

      - name: Start tools on Modal (staging)
        env:
          MODAL_TOKEN_ID: ${{ secrets.MODAL_TOKEN_ID }}
          MODAL_TOKEN_SECRET: ${{ secrets.MODAL_TOKEN_SECRET }}
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          REPLICATE_API_TOKEN: ${{ secrets.REPLICATE_API_TOKEN }}
          ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}
        run: make start-tools

      - name: Integration tests
        run: make test-integration

  release_pr_to_main:
    name: "Open PR: staging -> main"
    needs: deploy-and-test
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Need full history for branch operations
      - name: Create PR from staging to main
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          # Check if PR already exists for this staging SHA
          EXISTING_PR=$(gh pr list --base main --head staging --state open --json number --jq '.[0].number' || echo "")

          if [ -z "$EXISTING_PR" ]; then
            echo "Creating new PR from staging to main"
            gh pr create \
              --base main \
              --head staging \
              --title "Release: Promote staging -> main" \
              --body "## üöÄ Production Release

          This PR promotes validated changes from staging to main for production deployment.

          ### Validation Status
          - ‚úÖ **Build & Pin**: Completed successfully
          - ‚úÖ **Deploy to staging**: Deployed and verified
          - ‚úÖ **Smoke tests**: All tests passed

          ### Release Info
          - **Run ID**: ${{ github.run_id }}
          - **SHA**: ${{ github.sha }}
          - **Workflow**: [View run](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})

          ---

          **‚ö†Ô∏è Action Required:** Add a release label to set version:
          - \`release:patch\` - for bug fixes (1.0.0 ‚Üí 1.0.1)
          - \`release:minor\` - for new features (1.0.0 ‚Üí 1.1.0)
          - \`release:major\` - for breaking changes (1.0.0 ‚Üí 2.0.0)

          Version will be created automatically when label is added."

            echo "‚úÖ PR created successfully"
          else
            echo "‚ö†Ô∏è PR #$EXISTING_PR already exists from staging to main"
            echo "Updating existing PR with latest run info"

            gh pr comment $EXISTING_PR --body "## Updated from Run #${{ github.run_id }}

          - **SHA**: ${{ github.sha }}
          - **Workflow**: [View run](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})
          - **Status**: ‚úÖ All validations passed"
          fi
