name: Staging Lane

on:
  push:
    branches: [ staging ]
    paths-ignore:
      - "code/apps/core/processors/**/registry.yaml"  # Ignore pin commits
  workflow_dispatch: {}

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  MODAL_ENVIRONMENT: staging

jobs:
  build_and_pin:
    name: Build & Pin (linux/amd64)
    runs-on: ubuntu-latest
    timeout-minutes: 60
    permissions:
      contents: write  # commit pins to staging
      packages: write  # push GHCR
    steps:
      - uses: actions/checkout@v4
      - uses: docker/setup-buildx-action@v3
      - uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - uses: actions/setup-python@v5
        with: { python-version: "3.11" }
      - run: pip install -r requirements.txt -r requirements-dev.txt
      - name: Build & Pin (linux/amd64 only)
        run: make build-and-pin REGISTRY=ghcr.io/veyorokon/theory-api PLATFORM=amd64
      - name: Commit pin updates to staging (if any)
        env:
          ADMIN_GITHUB_TOKEN: ${{ secrets.ADMIN_GITHUB_TOKEN }}
        run: |
          git config user.name "pin-bot"
          git config user.email "pin-bot@users.noreply.github.com"
          if ! git diff --quiet; then
            git add -A
            git commit -m "pin: update processor digests (staging)"
            git config --unset http.https://github.com/.extraheader || true
            git remote set-url origin https://x-access-token:${ADMIN_GITHUB_TOKEN}@github.com/veyorokon/theory-api.git
            git pull --rebase origin staging
            git push
          fi

  sync-secrets-staging:
    name: Sync secrets to Modal (staging)
    needs: build_and_pin
    runs-on: ubuntu-latest
    env:
      MODAL_ENVIRONMENT: staging
      DJANGO_SETTINGS_MODULE: backend.settings.unittest
    steps:
      - uses: actions/checkout@v4
        with:
          ref: staging  # Get latest staging with pin commits
      - uses: actions/setup-python@v5
        with: { python-version: "3.11" }
      - run: pip install -r requirements.txt -r requirements-dev.txt
      - name: Sync secrets to Modal (staging)
        env:
          # Modal authentication
          MODAL_TOKEN_ID: ${{ secrets.MODAL_TOKEN_ID }}
          MODAL_TOKEN_SECRET: ${{ secrets.MODAL_TOKEN_SECRET }}
          # Expose GitHub secrets as process environment variables
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          REPLICATE_API_TOKEN: ${{ secrets.REPLICATE_API_TOKEN }}
          ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}
        run: |
          make modal-sync-secrets REF=llm/litellm@1 ENV=staging

  deploy:
    name: Deploy to Modal (staging)
    needs: sync-secrets-staging
    runs-on: ubuntu-latest
    timeout-minutes: 20
    env:
      DJANGO_SETTINGS_MODULE: backend.settings.unittest
      MODAL_ENABLED: "true"
      MODAL_ENVIRONMENT: staging
      BRANCH: ${{ github.ref_name }}
      USER: ${{ github.actor }}
    steps:
      - uses: actions/checkout@v4
        with:
          ref: staging  # Get latest staging with pin commits
      - uses: actions/setup-python@v5
        with: { python-version: "3.11" }
      - run: pip install -r requirements.txt -r requirements-dev.txt
      - name: Install yq
        run: |
          sudo wget -qO /usr/local/bin/yq https://github.com/mikefarah/yq/releases/latest/download/yq_linux_amd64
          sudo chmod +x /usr/local/bin/yq
      - name: Deploy functions (digest-only via modalctl)
        env:
          MODAL_TOKEN_ID: ${{ secrets.MODAL_TOKEN_ID }}
          MODAL_TOKEN_SECRET: ${{ secrets.MODAL_TOKEN_SECRET }}
        run: |
          OCI=$(yq eval '.image.platforms.amd64' code/apps/core/processors/llm_litellm/registry.yaml)
          make modal-deploy REF=llm/litellm@1 ENV=staging OCI="$OCI"

  post_deploy_checks:
    name: Smoke tests
    needs: deploy
    runs-on: ubuntu-latest
    timeout-minutes: 15
    env:
      DJANGO_SETTINGS_MODULE: backend.settings.unittest
      MODAL_ENABLED: "true"
      MODAL_ENVIRONMENT: staging
    steps:
      - uses: actions/checkout@v4
        with:
          ref: staging  # Get latest staging with pin commits
      - uses: actions/setup-python@v5
        with: { python-version: "3.11" }
      - run: pip install -r requirements.txt -r requirements-dev.txt
      - name: Smoke tests (timeout protected)
        run: make smoke-modal ENV=staging

  release_pr_to_main:
    name: "Open PR: staging -> main"
    needs: post_deploy_checks
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
    steps:
      - uses: actions/checkout@v4
        with:
          ref: staging  # Get latest staging with pin commits
      - name: Create/Update PR to main
        uses: peter-evans/create-pull-request@v6
        with:
          branch: promote/staging-to-main
          base: main
          title: "Promote staging -> main"
          body: "Pins and code validated on staging. Ready for production."
          commit-message: "chore: promote staging -> main"
          labels: release
