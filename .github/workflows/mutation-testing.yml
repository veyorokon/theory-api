name: Mutation Testing

on:
  schedule:
    - cron: "0 2 * * SUN"  # Weekly Sunday 02:00 UTC
  workflow_dispatch: {}

jobs:
  mutmut:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      issues: write
    env:
      PIP_DISABLE_PIP_VERSION_CHECK: "1"
      PYTHONUNBUFFERED: "1"
    steps:
      - uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install deps
        run: |
          pip install -U pip wheel
          pip install -r requirements.txt

      - name: Run mutation testing
        run: |
          make mutmut-reset
          make mutmut-run

      - name: Generate mutation report
        run: |
          cd code
          echo "# Mutation Testing Report" > mutation_report.md
          echo "" >> mutation_report.md
          echo "**Date**: $(date -u '+%Y-%m-%d %H:%M:%S UTC')" >> mutation_report.md
          echo "**Commit**: ${{ github.sha }}" >> mutation_report.md
          echo "" >> mutation_report.md
          
          # Get results summary
          mutmut results >> mutation_report.md || echo "No results available" >> mutation_report.md
          
          echo "" >> mutation_report.md
          echo "## Killed Mutations (Good)" >> mutation_report.md
          mutmut show --status killed >> mutation_report.md || echo "None" >> mutation_report.md
          
          echo "" >> mutation_report.md  
          echo "## Survived Mutations (Need Attention)" >> mutation_report.md
          mutmut show --status survived >> mutation_report.md || echo "None" >> mutation_report.md

      - name: Upload mutation report
        uses: actions/upload-artifact@v4
        with:
          name: mutation-report
          path: code/mutation_report.md
          retention-days: 90

      - name: Create or update mutation testing issue
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const report = fs.readFileSync('code/mutation_report.md', 'utf8');
            
            // Look for existing mutation testing issue
            const { data: issues } = await github.rest.issues.listForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              labels: 'mutation-testing,automation',
              state: 'open'
            });
            
            const existingIssue = issues.find(issue => 
              issue.title.includes('Mutation Testing Report')
            );
            
            const title = `Mutation Testing Report - ${new Date().toISOString().split('T')[0]}`;
            const body = report + '\n\n' + 
              `**Next Steps:**\n` +
              `- Review survived mutations to identify missing test cases\n` +
              `- Add tests for uncovered edge cases and error conditions\n` +
              `- Consider if survived mutations indicate dead code paths\n\n` +
              `Auto-generated by [Mutation Testing workflow](${context.serverUrl}/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId})`;
            
            if (existingIssue) {
              // Update existing issue
              await github.rest.issues.update({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: existingIssue.number,
                title: title,
                body: body
              });
              console.log(`Updated existing mutation testing issue #${existingIssue.number}`);
            } else {
              // Create new issue
              const { data: newIssue } = await github.rest.issues.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title: title,
                body: body,
                labels: ['mutation-testing', 'automation', 'quality']
              });
              console.log(`Created new mutation testing issue #${newIssue.number}`);
            }