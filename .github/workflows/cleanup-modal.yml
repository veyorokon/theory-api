name: Cleanup Modal Deployments

on:
  schedule:
    - cron: '13 0 * * *'  # Temporary: runs at 00:13 UTC for testing (change to '0 2 * * *' after validation)
  workflow_dispatch: {}

concurrency:
  group: ${{ github.workflow }}
  cancel-in-progress: false

jobs:
  cleanup:
    name: Clean up stale Modal deployments
    runs-on: ubuntu-latest
    env:
      DJANGO_SETTINGS_MODULE: backend.settings.dev_remote
      APP_ENV: dev
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Need all branches for comparison
      - uses: actions/setup-python@v5
        with:
          python-version: "3.11"
          cache: pip
          cache-dependency-path: |
            requirements.txt
            requirements-dev.txt
      - run: pip install -r requirements.txt -r requirements-dev.txt

      - name: Clean up stale Modal deployments
        env:
          MODAL_TOKEN_ID: ${{ secrets.MODAL_TOKEN_ID }}
          MODAL_TOKEN_SECRET: ${{ secrets.MODAL_TOKEN_SECRET }}
        run: |
          echo "→ Scanning Modal deployments for stale branches..."

          # Get all Modal app names from Modal CLI
          # Expected format: feat-websocket-standardization-veyorokon-llm-litellm-v1
          # Pattern: {branch}-{user}-{ref-slug}

          modal app list --env dev --json | jq -r '.[].name' | while read -r app_name; do
            # Extract branch name from deployment name
            # Remove user suffix and ref suffix to get branch name
            # Example: feat-websocket-standardization-veyorokon-llm-litellm-v1
            #   -> extract: feat-websocket-standardization

            # Skip if it doesn't match our pattern (branch-user-ref)
            if ! echo "$app_name" | grep -qE '^[^-]+-[^-]+-[^-]+'; then
              echo "  ⊘ Skip: $app_name (doesn't match branch pattern)"
              continue
            fi

            # Extract branch by removing last two segments (user and ref)
            branch=$(echo "$app_name" | rev | cut -d'-' -f3- | rev)

            echo "  • $app_name -> branch: $branch"

            # Check if branch exists locally or remotely
            if git show-ref --verify --quiet "refs/heads/$branch" || \
               git show-ref --verify --quiet "refs/remotes/origin/$branch"; then
              echo "    ✓ Branch exists, keeping deployment"
            else
              echo "    ✗ Branch deleted, stopping deployment"

              # Extract ref from app name (last segment before user)
              # Example: feat-websocket-standardization-veyorokon-llm-litellm-v1
              #   -> llm/litellm@1 (reconstruct from llm-litellm-v1)
              ref_slug=$(echo "$app_name" | rev | cut -d'-' -f1-3 | rev)
              ref=$(echo "$ref_slug" | sed 's/-/\//; s/-v/@/')

              echo "    → Stopping: $ref (app: $app_name)"
              python code/manage.py modalctl stop --ref "$ref" || echo "    ⚠ Failed to stop $ref"
            fi
          done

          echo "✓ Cleanup complete"
