name: CI/CD Pipeline

on:
  push:
    branches: [main, staging, dev]
  pull_request:
    branches: [main, staging, dev]

env:
  REGISTRY: public.ecr.aws
  IMAGE_NAME: theory-api

jobs:
  fast:
    name: Fast lane (unit + docs)
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Unit tests (SQLite)
        env:
          DJANGO_SETTINGS_MODULE: backend.settings.unittest
        run: |
          make test-unit

      - name: Build docs (html + drift check)
        run: |
          make docs

  acceptance:
    name: Docker lane (acceptance + property)
    if: |
      github.event_name == 'push' ||
      contains(github.event.pull_request.labels.*.name, 'run-acceptance')
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Verify Docker & Compose
        run: |
          docker version
          docker compose version

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run acceptance tests (docker compose)
        env:
          DJANGO_SETTINGS_MODULE: backend.settings.unittest
        run: |
          make test-acceptance

      - name: Run property tests (docker compose)
        env:
          DJANGO_SETTINGS_MODULE: backend.settings.unittest
        run: |
          make test-property

      - name: Teardown
        if: always()
        run: docker compose down -v

  build:
    needs: fast
    runs-on: ubuntu-latest
    if: github.event_name == 'push'
    
    outputs:
      image-tag: ${{ steps.meta.outputs.tags }}
      
    steps:
    - uses: actions/checkout@v4
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1
    
    - name: Login to Amazon ECR Public
      id: login-ecr-public
      uses: aws-actions/amazon-ecr-login@v2
      with:
        registry-type: public
    
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=sha,prefix={{branch}}-
    
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}

  deploy-dev:
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/dev' && vars.DEPLOY_ENABLED_DEV == 'true'
    environment: development
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1
    
    - name: Deploy to ECS Development
      run: |
        aws ecs update-service \
          --cluster theory-dev-cluster \
          --service theory-api-dev \
          --force-new-deployment \
          --desired-count 1

  deploy-staging:
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/staging' && vars.DEPLOY_ENABLED_STAGING == 'true'
    environment: staging  # Self-approval policy: gated by environment reviewers (see ADR-0003)
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1
    
    - name: Deploy to ECS Staging  
      run: |
        aws ecs update-service \
          --cluster theory-staging-cluster \
          --service theory-api-staging \
          --force-new-deployment \
          --desired-count 1

  deploy-production:
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && vars.DEPLOY_ENABLED_PROD == 'true'
    environment: production  # Self-approval policy: gated by environment reviewers (see ADR-0003)
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1
    
    - name: Deploy to ECS Production
      run: |
        aws ecs update-service \
          --cluster theory-prod-cluster \
          --service theory-api-prod \
          --force-new-deployment \
          --desired-count 2
