name: CI/CD Pipeline

on:
  push:
    branches: [main, staging, dev]
  pull_request:
    branches: [main, staging, dev]

env:
  REGISTRY: public.ecr.aws
  IMAGE_NAME: theory-api

jobs:
  test:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres_password
          POSTGRES_DB: theory_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y libpq-dev
    
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Unit tests (SQLite)
      env:
        DJANGO_SETTINGS_MODULE: backend.settings.unittest
      run: |
        pytest -q -m "unit and not integration and not requires_postgres"
    
    - name: Migrate database
      env:
        DATABASE_URL: postgres://postgres:postgres_password@localhost:5432/theory_test
        REDIS_URL: redis://localhost:6379/0
        DJANGO_SETTINGS_MODULE: backend.settings.test
      run: |
        cd code && python manage.py migrate --noinput
        cd code && python manage.py makemigrations --check
    
    - name: Acceptance tests (Postgres)
      env:
        DATABASE_URL: postgres://postgres:postgres_password@localhost:5432/theory_test
        REDIS_URL: redis://localhost:6379/0
        DJANGO_SETTINGS_MODULE: backend.settings.test
      run: |
        pytest -q -m "ledger_acceptance or requires_postgres"
    
    - name: Install docs dependencies
      run: pip install -r docs/requirements.txt
    
    - name: Generate docs references
      run: |
        cd code && python manage.py docs_export --out ../docs/_generated --erd --api --schemas
    
    - name: Build docs (HTML)
      working-directory: docs
      env:
        SPHINXOPTS: "-W"
      run: make clean html
    
    - name: Check docs links
      working-directory: docs
      run: make linkcheck
    
    - name: Upload docs artifact (PR preview)
      if: github.event_name == 'pull_request'
      uses: actions/upload-artifact@v4
      with:
        name: docs-html-preview
        path: docs/_build/html

  build:
    needs: test
    runs-on: ubuntu-latest
    if: github.event_name == 'push'
    
    outputs:
      image-tag: ${{ steps.meta.outputs.tags }}
      
    steps:
    - uses: actions/checkout@v4
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1
    
    - name: Login to Amazon ECR Public
      id: login-ecr-public
      uses: aws-actions/amazon-ecr-login@v2
      with:
        registry-type: public
    
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=sha,prefix={{branch}}-
    
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}

  deploy-dev:
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/dev' && vars.DEPLOY_ENABLED_DEV == 'true'
    environment: development
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1
    
    - name: Deploy to ECS Development
      run: |
        aws ecs update-service \
          --cluster theory-dev-cluster \
          --service theory-api-dev \
          --force-new-deployment \
          --desired-count 1

  deploy-staging:
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/staging' && vars.DEPLOY_ENABLED_STAGING == 'true'
    environment: staging  # Self-approval policy: gated by environment reviewers (see ADR-0003)
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1
    
    - name: Deploy to ECS Staging  
      run: |
        aws ecs update-service \
          --cluster theory-staging-cluster \
          --service theory-api-staging \
          --force-new-deployment \
          --desired-count 1

  deploy-production:
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && vars.DEPLOY_ENABLED_PROD == 'true'
    environment: production  # Self-approval policy: gated by environment reviewers (see ADR-0003)
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1
    
    - name: Deploy to ECS Production
      run: |
        aws ecs update-service \
          --cluster theory-prod-cluster \
          --service theory-api-prod \
          --force-new-deployment \
          --desired-count 2