name: Acceptance & Property

on:
  push:
    branches: [dev, main]
  pull_request:
    branches: [dev, main]
    types: [opened, synchronize, labeled]
  schedule:
    - cron: "0 6 * * *"
  workflow_dispatch: {}

jobs:
  acceptance:
    runs-on: ubuntu-latest
    if: |
      github.event_name == 'push' ||
      github.event_name == 'schedule' ||
      github.event_name == 'workflow_dispatch' ||
      (github.event_name == 'pull_request' && contains(github.event.pull_request.labels.*.name, 'run-acceptance'))
    permissions:
      contents: read
      packages: read
    env:
      PIP_DISABLE_PIP_VERSION_CHECK: "1"
      PYTHONUNBUFFERED: "1"
    steps:
      - uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install deps
        run: |
          pip install -U pip wheel
          pip install -r requirements.txt

      - name: Bring up services (Docker)
        run: |
          docker version
          docker compose version
          docker compose up -d postgres redis minio

      - name: Wait for services
        run: |
          for i in {1..30}; do
            curl -fsS http://127.0.0.1:9000/minio/health/live && break
            echo "waiting for MinIO..."; sleep 2
          done
          docker compose ps

      - name: Authenticate Docker to GHCR
        if: github.event_name != 'pull_request' || github.event.pull_request.head.repo.fork == false
        run: |
          echo "${{ secrets.GHCR_RO || secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin

      - name: Skip if pending digests
        id: pincheck
        run: |
          if grep -R "oci:.*pending" code/apps/core/registry/processors; then
            echo "skip=true" >> $GITHUB_OUTPUT
            echo "‚ö†Ô∏è Found pending digests in registry - skipping acceptance until Build & Pin completes"
          else
            echo "skip=false" >> $GITHUB_OUTPUT
            echo "‚úÖ All digests pinned - proceeding with acceptance tests"
          fi

      - name: Assert ALL pinned images exist in GHCR
        if: steps.pincheck.outputs.skip != 'true' && (github.event_name != 'pull_request' || github.event.pull_request.head.repo.fork == false)
        run: |
          set -euo pipefail
          for f in code/apps/core/registry/processors/*.yaml; do
            REF=$(python -c 'import sys, yaml; doc = yaml.safe_load(open(sys.argv[1])); print(doc["image"]["oci"])' "$f")
            echo "üîç Checking $REF (from $f)‚Ä¶"
            docker manifest inspect "$REF" >/dev/null || {
              echo "::error::Pinned image not found in GHCR: $REF (from $f)";
              echo "Run Build & Pin workflow and merge the PR.";
              exit 1;
            }
          done
          echo "‚úÖ All pinned images exist in GHCR"

      - name: Sanity check - verify Django imports
        working-directory: code
        run: |
          python -c "import os,sys; print('‚úÖ CWD:', os.getcwd()); import backend, apps; print('‚úÖ Django imports OK')"

      - name: Acceptance tests
        if: steps.pincheck.outputs.skip != 'true'
        run: |
          make test-acceptance

      - name: Property tests
        if: steps.pincheck.outputs.skip != 'true'
        run: |
          make test-property

      - name: Integration tests (deterministic seams)
        if: steps.pincheck.outputs.skip != 'true'
        env:
          DJANGO_SETTINGS_MODULE: backend.settings.test
          DOCKER_PULL_PLATFORM: linux/amd64
          S3_ENDPOINT: http://127.0.0.1:9000
          S3_ACCESS_KEY: minioadmin
          S3_SECRET_KEY: minioadmin
          S3_BUCKET: default
        run: |
          echo "üîç MinIO health:"
          curl -f http://127.0.0.1:9000/minio/health/live || echo "‚ö†Ô∏è MinIO health check failed"
          cd code && python -m pytest -s -v -m integration ../tests/integration

      - name: Teardown & logs
        if: always()
        run: |
          echo "----- docker compose ps -----"
          docker compose ps || true
          echo "----- docker compose logs (last 200 lines) -----"
          docker compose logs --tail=200 || true
          docker compose down -v || { echo "compose down: nothing to stop (ok)"; exit 0; }
