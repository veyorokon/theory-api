name: Dev

on:
  push:
    branches: [dev]
    paths:
      - "code/**"
      - "tests/**"
      - "tools/**/registry.yaml"
      - ".github/workflows/dev.yml"
      - "Makefile"
      - "Dockerfile"
      - "docker-compose.yml"
  workflow_dispatch: {}

concurrency:
  group: dev
  cancel-in-progress: true

jobs:
  build-tools:
    name: Build & Publish Tool Images
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write
    env:
      DJANGO_SETTINGS_MODULE: backend.settings.dev_local
      PLATFORM: amd64
    steps:
      - uses: actions/checkout@v4
      - uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - uses: actions/setup-python@v5
        with:
          python-version: "3.11"
          cache: pip
          cache-dependency-path: |
            requirements.txt
            requirements-dev.txt
      - run: pip install -r requirements.txt -r requirements-dev.txt
      - run: cd code && python manage.py migrate --run-syncdb

      - name: Build and publish tool images
        run: make build-and-publish-all PLATFORM=amd64

      - name: Commit pin updates
        env:
          ADMIN_GITHUB_TOKEN: ${{ secrets.ADMIN_GITHUB_TOKEN }}
        run: |
          git config user.name "pin-bot"
          git config user.email "pin-bot@users.noreply.github.com"
          if ! git diff --quiet tools/; then
            git add tools/
            git commit -m "pin: update tool digests (dev)"
            git config --unset http.https://github.com/.extraheader || true
            git remote set-url origin https://x-access-token:${ADMIN_GITHUB_TOKEN}@github.com/veyorokon/theory-api.git
            git pull --rebase origin dev
            git push
          fi

  build-django:
    name: Build & Publish Django Image
    runs-on: ubuntu-latest
    permissions:
      packages: write
    steps:
      - uses: actions/checkout@v4
      - uses: docker/setup-buildx-action@v3
      - uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push Django image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: Dockerfile
          push: true
          tags: ghcr.io/veyorokon/theory-django:dev
          cache-from: type=registry,ref=ghcr.io/veyorokon/theory-django:dev
          cache-to: type=inline

  validate-django:
    name: Validate Django Container
    needs: build-django
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Pull Django image
        run: docker pull ghcr.io/veyorokon/theory-django:dev

      - name: Start services
        run: docker compose --profile base up -d

      - name: Run Django container health check
        run: |
          docker run --rm --network theory_api_app_network \
            -e DJANGO_SETTINGS_MODULE=backend.settings.production \
            -e DJANGO_SECRET_KEY=test-key \
            -e DATABASE_URL=postgres://postgres:postgres_password@postgres:5432/postgres \
            -e ALLOWED_HOSTS=* \
            -e SECURE_SSL_REDIRECT=false \
            -e APP_ENV=dev \
            -e STORAGE_BACKEND=minio \
            -p 8000:8000 \
            -d \
            --name theory-django-test \
            ghcr.io/veyorokon/theory-django:dev

          # Wait for health check
          for i in {1..30}; do
            if docker exec theory-django-test curl -f http://localhost:8000/health/ 2>/dev/null; then
              echo "✅ Django container healthy"
              exit 0
            fi
            echo "⏳ Waiting for Django... ($i/30)"
            sleep 2
          done

          echo "❌ Health check failed"
          docker logs theory-django-test
          exit 1

      - name: Cleanup
        if: always()
        run: |
          docker stop theory-django-test || true
          docker compose down -v

  test-modal:
    name: Test with Modal Adapter
    needs: build-tools
    runs-on: ubuntu-latest
    env:
      DJANGO_SETTINGS_MODULE: backend.settings.dev_remote
      ADAPTER: modal
      PLATFORM: amd64
      APP_ENV: dev
      MOCK_MISSING_SECRETS: "false"
      MODAL_TOKEN_ID: ${{ secrets.MODAL_TOKEN_ID }}
      MODAL_TOKEN_SECRET: ${{ secrets.MODAL_TOKEN_SECRET }}
      OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
      REPLICATE_API_TOKEN: ${{ secrets.REPLICATE_API_TOKEN }}
      ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}
    steps:
      - uses: actions/checkout@v4
        with:
          ref: dev  # Get latest dev with pin commits
      - uses: actions/setup-python@v5
        with:
          python-version: "3.11"
          cache: pip
          cache-dependency-path: |
            requirements.txt
            requirements-dev.txt
      - run: pip install -r requirements.txt -r requirements-dev.txt
      - run: cd code && python manage.py migrate --noinput
      - run: cd code && python manage.py toolctl sync

      - name: Deploy tools to Modal
        run: make start-tools ADAPTER=modal

      - name: Run integration tests
        run: make test-integration

  promote:
    name: Promote to Staging
    needs: [validate-django, test-modal]
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: dev
      - name: Fast-forward staging
        env:
          ADMIN_GITHUB_TOKEN: ${{ secrets.ADMIN_GITHUB_TOKEN }}
        run: |
          git config user.name "promotion-bot"
          git config user.email "promotion-bot@users.noreply.github.com"
          git config --unset http.https://github.com/.extraheader || true
          git remote set-url origin https://x-access-token:${ADMIN_GITHUB_TOKEN}@github.com/veyorokon/theory-api.git
          git push origin dev:staging --force-with-lease
          echo "✅ Promoted dev → staging"
