name: Build & Pin Processor Images

on:
  push:
    branches: [dev]
    paths:
      - "code/apps/core/processors/**"
      - "code/libs/**"
      - "code/apps/core/registry/processors/**"
  workflow_dispatch: {}

jobs:
  discover-changes:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set.outputs.matrix }}
    steps:
      - uses: actions/checkout@v4

      - uses: dorny/paths-filter@v3
        id: changes
        with:
          filters: |
            processors:
              - 'code/apps/core/processors/**'
              - 'code/libs/**'
              - 'code/apps/core/registry/processors/**'

      - name: Set matrix
        id: set
        run: |
          set -euo pipefail
          
          if [[ "${{ steps.changes.outputs.processors }}" != 'true' ]]; then
            echo 'matrix={"include":[]}' >> $GITHUB_OUTPUT
            exit 0
          fi
          
          # Find processor directories
          procs=$(ls -1 code/apps/core/processors 2>/dev/null | tr '\n' ' ' || echo "")
          if [ -z "$procs" ]; then
            echo 'matrix={"include":[]}' >> $GITHUB_OUTPUT
            exit 0
          fi
          
          # Build matrix JSON
          matrix_items=""
          for p in $procs; do
            if [ -d "code/apps/core/processors/$p" ]; then
              matrix_items="${matrix_items}{\"processor\":\"$p\"},"
            fi
          done
          matrix_items=$(echo "$matrix_items" | sed 's/,$//')
          
          echo "matrix={\"include\":[$matrix_items]}" >> $GITHUB_OUTPUT

  build-and-pin:
    needs: discover-changes
    if: ${{ fromJSON(needs.discover-changes.outputs.matrix).include[0] != null }}
    runs-on: ubuntu-latest
    strategy:
      matrix: ${{ fromJSON(needs.discover-changes.outputs.matrix) }}
    permissions:
      contents: write
      packages: write
      pull-requests: write
    env:
      REGISTRY: ghcr.io
      TAG: sha-${{ github.sha }}
    steps:
      - uses: actions/checkout@v4
        with:
          persist-credentials: true
          ref: ${{ github.ref }}

      - name: Set up QEMU (multi-arch)
        uses: docker/setup-qemu-action@v3

      - name: Set up Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Derive image name
        id: img
        run: |
          set -euo pipefail
          PROC="${{ matrix.processor }}"
          SLUG="${PROC//_/-}"
          IMAGE="${REGISTRY}/${{ github.repository_owner }}/${SLUG}"
          echo "image=${IMAGE}" >> $GITHUB_OUTPUT

      - name: Build & Push (linux/amd64)
        run: |
          set -euo pipefail
          PROC="${{ matrix.processor }}"
          DOCKERFILE="code/apps/core/processors/${PROC}/Dockerfile"
          
          if [ ! -f "$DOCKERFILE" ]; then
            echo "ERROR: Dockerfile not found: $DOCKERFILE"
            exit 1
          fi
          
          docker buildx build \
            --platform linux/amd64 \
            -f "${DOCKERFILE}" \
            -t "${{ steps.img.outputs.image }}:${TAG}" \
            --push \
            .

      - name: Resolve digest
        id: digest
        run: |
          set -euo pipefail
          DIGEST=$(docker buildx imagetools inspect "${{ steps.img.outputs.image }}:${TAG}" --format '{{json .}}' | jq -r '.manifest.digest // .descriptor.digest')
          echo "digest=${DIGEST}" >> $GITHUB_OUTPUT

      - name: Pin digest into registry YAML
        run: |
          set -euo pipefail
          PROC="${{ matrix.processor }}"
          IMAGE_BASE="${{ steps.img.outputs.image }}"
          DIGEST="${{ steps.digest.outputs.digest }}"
          
          python scripts/ci/pin_processor.py "$PROC" "$IMAGE_BASE" "$DIGEST"

      - name: Create pin PR
        id: cpr
        uses: peter-evans/create-pull-request@v6
        with:
          token: ${{ secrets.BOT_TOKEN || github.token }}
          branch: chore/pin-${{ matrix.processor }}-${{ github.sha }}
          title: "Pin digest for ${{ matrix.processor }} @ ${{ github.sha }}"
          commit-message: "chore(registry): pin ${{ matrix.processor }} to ${{ steps.digest.outputs.digest }}"
          body: |
            Auto-pinned by Build & Pin workflow.
            
            **Processor**: ${{ matrix.processor }}
            **Image**: ${{ steps.img.outputs.image }}
            **Digest**: ${{ steps.digest.outputs.digest }}
            **Commit**: ${{ github.sha }}
          labels: registry, automation
          base: dev
          signoff: true

      - name: Ensure PR exists (fail-closed)
        if: ${{ steps.cpr.outputs.pull-request-number == '' }}
        run: |
          echo "::error::Pin branch pushed but PR was not created (policy/permissions?)."
          echo "Ask an admin to enable 'Read/write' + PR creation for Actions, or provide BOT_TOKEN."
          exit 1