name: Build & Pin Processor Images

on:
  push:
    branches: [dev]
    paths:
      - "code/apps/core/processors/**"
      - "code/libs/**"
      - "code/apps/core/registry/processors/**"
  workflow_dispatch: {}

jobs:
  discover-changes:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set.outputs.matrix }}
    steps:
      - uses: actions/checkout@v4

      - uses: dorny/paths-filter@v3
        id: changes
        with:
          filters: |
            processors:
              - 'code/apps/core/processors/**'
              - 'code/libs/**'
              - 'code/apps/core/registry/processors/**'

      - name: Set matrix
        id: set
        run: |
          set -euo pipefail

          if [[ "${{ steps.changes.outputs.processors }}" != 'true' ]]; then
            echo 'matrix={"include":[]}' >> $GITHUB_OUTPUT
            exit 0
          fi

          # Find processor directories
          procs=$(ls -1 code/apps/core/processors 2>/dev/null | tr '\n' ' ' || echo "")
          if [ -z "$procs" ]; then
            echo 'matrix={"include":[]}' >> $GITHUB_OUTPUT
            exit 0
          fi

          # Build matrix JSON
          matrix_items=""
          for p in $procs; do
            if [ -d "code/apps/core/processors/$p" ]; then
              matrix_items="${matrix_items}{\"processor\":\"$p\"},"
            fi
          done
          matrix_items=$(echo "$matrix_items" | sed 's/,$//')

          echo "matrix={\"include\":[$matrix_items]}" >> $GITHUB_OUTPUT

  build-and-pin:
    needs: discover-changes
    if: ${{ fromJSON(needs.discover-changes.outputs.matrix).include[0] != null }}
    runs-on: ubuntu-latest
    strategy:
      matrix: ${{ fromJSON(needs.discover-changes.outputs.matrix) }}
    permissions:
      contents: write
      packages: write
      pull-requests: write
      actions: read
      metadata: read
      issues: write
    env:
      REGISTRY: ghcr.io
      TAG: sha-${{ github.sha }}
    steps:
      - uses: actions/checkout@v4
        with:
          persist-credentials: true
          ref: ${{ github.ref }}

      - name: Set up QEMU (multi-arch)
        uses: docker/setup-qemu-action@v3

      - name: Set up Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Derive image name
        id: img
        run: |
          set -euo pipefail
          PROC="${{ matrix.processor }}"
          SLUG="${PROC//_/-}"
          IMAGE="${REGISTRY}/${{ github.repository_owner }}/${SLUG}"
          echo "image=${IMAGE}" >> $GITHUB_OUTPUT

      - name: Build & Push (multi-platform)
        run: |
          set -euo pipefail
          PROC="${{ matrix.processor }}"
          DOCKERFILE="code/apps/core/processors/${PROC}/Dockerfile"

          if [ ! -f "$DOCKERFILE" ]; then
            echo "ERROR: Dockerfile not found: $DOCKERFILE"
            exit 1
          fi

          docker buildx build \
            --platform linux/amd64,linux/arm64 \
            -f "${DOCKERFILE}" \
            -t "${{ steps.img.outputs.image }}:${TAG}" \
            --push \
            .

      - name: Resolve digest
        id: digest
        run: |
          set -euo pipefail
          DIGEST=$(docker buildx imagetools inspect "${{ steps.img.outputs.image }}:${TAG}" --format '{{json .}}' | jq -r '.manifest.digest // .descriptor.digest')
          echo "digest=${DIGEST}" >> $GITHUB_OUTPUT

      - name: Pin digest into registry YAML
        run: |
          set -euo pipefail
          PROC="${{ matrix.processor }}"
          IMAGE_BASE="${{ steps.img.outputs.image }}"
          DIGEST="${{ steps.digest.outputs.digest }}"

          python scripts/ci/pin_processor.py "$PROC" "$IMAGE_BASE" "$DIGEST"

      - name: Cleanup old pin branches
        run: |
          set -euo pipefail
          PROC="${{ matrix.processor }}"

          # List and delete old pin branches for this processor (keep only the one we're about to create)
          git fetch origin
          OLD_BRANCHES=$(git branch -r | grep "origin/chore/pin-${PROC}" | grep -v "chore/pin-${PROC}$" || true)

          if [ -n "$OLD_BRANCHES" ]; then
            echo "ðŸ§¹ Cleaning up old pin branches for ${PROC}:"
            echo "$OLD_BRANCHES"

            for branch in $OLD_BRANCHES; do
              branch_name=$(echo "$branch" | sed 's|origin/||')
              echo "Deleting branch: $branch_name"
              git push origin --delete "$branch_name" || echo "Failed to delete $branch_name (may not exist)"
            done
          else
            echo "âœ… No old pin branches to clean up for ${PROC}"
          fi

      - name: Create pin PR
        id: cpr
        uses: peter-evans/create-pull-request@v6
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          branch: chore/pin-${{ matrix.processor }}
          title: "Pin digest for ${{ matrix.processor }}"
          commit-message: "chore(registry): pin ${{ matrix.processor }} to ${{ steps.digest.outputs.digest }}"
          body: |
            Auto-pinned by Build & Pin workflow.

            **Processor**: ${{ matrix.processor }}
            **Image**: ${{ steps.img.outputs.image }}
            **Digest**: ${{ steps.digest.outputs.digest }}
            **Commit**: ${{ github.sha }}

            This PR updates the registry with the latest built image digest.
          labels: registry, automation
          base: dev
          signoff: true
          delete-branch: true

      - name: Ensure PR exists (fail-closed)
        if: ${{ steps.cpr.outputs.pull-request-number == '' }}
        run: |
          echo "::error::Pin branch pushed but PR was not created (policy/permissions?)."
          echo "This likely means GitHub Actions lacks permission to create PRs."
          echo "The registry changes have been committed to branch chore/pin-${{ matrix.processor }}"
          echo "Manual intervention required to merge these changes."
          exit 1

      - name: Cleanup on failure
        if: failure()
        run: |
          set +e  # Don't fail if cleanup fails
          echo "ðŸ§¹ Workflow failed, attempting cleanup..."

          # If PR creation failed, the branch still exists - leave it for manual merge
          # But clean up any truly orphaned branches from previous failed runs
          git fetch origin

          # Find branches older than the current one (based on commit timestamp)
          PROC="${{ matrix.processor }}"
          CURRENT_COMMIT="${{ github.sha }}"

          # Get list of all pin branches for this processor except current
          OLD_PIN_BRANCHES=$(git branch -r | grep "origin/chore/pin-${PROC}-" | grep -v "${CURRENT_COMMIT}" || true)

          if [ -n "$OLD_PIN_BRANCHES" ]; then
            echo "Found old pin branches to clean up:"
            echo "$OLD_PIN_BRANCHES"

            for branch in $OLD_PIN_BRANCHES; do
              branch_name=$(echo "$branch" | sed 's|origin/||' | xargs)
              echo "Deleting old branch: $branch_name"
              git push origin --delete "$branch_name" || echo "Could not delete $branch_name"
            done
          fi

          echo "Cleanup completed (non-fatal)"
