name: Modal Deploy

on:
  push:
    branches: [dev, staging, main]
  workflow_dispatch:
    inputs:
      environment:
        description: "Modal environment override (dev|staging|main)"
        required: false
        default: ""

jobs:
  deploy:
    name: Deploy to Modal
    runs-on: ubuntu-latest
    # Map git branch to GitHub Environment
    environment: ${{ inputs.environment != '' && inputs.environment || (github.ref_name == 'main' && 'prod' || github.ref_name) }}
    permissions:
      contents: read
    env:
      PIP_DISABLE_PIP_VERSION_CHECK: "1"
      PYTHONUNBUFFERED: "1"
      MODAL_ENVIRONMENT: ${{ inputs.environment != '' && inputs.environment || github.ref_name }}
    steps:
      - uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install dependencies
        run: |
          pip install -U pip wheel
          pip install -r requirements.txt
          pip install modal pyyaml

      - name: Compute required processor secrets
        run: |
          python code/ops/list_required_secrets.py > required_secrets.json
          echo "Required secrets: $(cat required_secrets.json)"

      - name: Lint registry secrets vs allow-list
        run: |
          set -euo pipefail
          REQ=$(python code/ops/list_required_secrets.py)
          echo "$REQ" | python -c "import json,sys; [print(s) for s in json.load(sys.stdin)]" | while read -r name; do
            case "$name" in
              OPENAI_API_KEY|REPLICATE_API_TOKEN) : ;;
              *) echo "‚ùå Secret '$name' not in allow-list; add it to the workflow env"; exit 1 ;;
            esac
          done
          echo "‚úÖ Registry secrets conform to allow-list."

      - name: Sync secrets to Modal
        env:
          # Modal auth
          MODAL_TOKEN_ID: ${{ secrets.MODAL_TOKEN_ID }}
          MODAL_TOKEN_SECRET: ${{ secrets.MODAL_TOKEN_SECRET }}
          MODAL_ENVIRONMENT: ${{ inputs.environment != '' && inputs.environment || github.ref_name }}

          # Allow-listed secrets (same names in GH and Modal)
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          REPLICATE_API_TOKEN: ${{ secrets.REPLICATE_API_TOKEN }}
        run: |
          set -euo pipefail
          # Log in once
          modal token set --token-id "$MODAL_TOKEN_ID" --token-secret "$MODAL_TOKEN_SECRET" >/dev/null
          echo "üîê Syncing secrets to Modal env=${MODAL_ENVIRONMENT}"

          # Build a tiny allow-list map from current env
          export ALLOW_LIST="OPENAI_API_KEY REPLICATE_API_TOKEN"

          # For each required secret from registry, create/update in Modal if present in allow-list.
          python - <<'PY'
          import json, os, subprocess, sys
          req = json.load(open("required_secrets.json"))

          allow = {k: os.environ.get(k, "") for k in os.environ.keys()}
          allowed_names = set(os.environ.get("ALLOW_LIST","OPENAI_API_KEY REPLICATE_API_TOKEN").split())

          missing = []
          for name in req:
              if name not in allowed_names:
                  missing.append(name)
                  continue
              val = allow.get(name, "")
              if not val:
                  missing.append(name)
                  continue
              # Upsert in Modal with the same name/value
              print(f"  Creating/updating {name}...")
              subprocess.run(
                  ["modal","secret","create", name, f"{name}={val}", "--env", os.environ["MODAL_ENVIRONMENT"], "--force"],
                  check=True, stdout=subprocess.DEVNULL
              )

          if missing:
              print("‚ùå Missing GitHub secret(s) for:", ", ".join(missing))
              sys.exit(1)
          else:
              print("‚úÖ All required secrets present and synced.")
          PY

      - name: Deploy all processors to Modal
        working-directory: code
        env:
          # Modal auth already set by previous step
          MODAL_ENVIRONMENT: ${{ inputs.environment != '' && inputs.environment || github.ref_name }}
        run: |
          set -euo pipefail
          python - <<'PY'
          import yaml, os, subprocess, glob

          # Find all processor registry files
          registry_files = glob.glob("apps/core/registry/processors/*.yaml")

          for registry_file in registry_files:
              doc = yaml.safe_load(open(registry_file))
              processor_ref = doc["ref"]
              image_ref = doc["image"]["oci"]

              # Determine secrets based on processor type
              if "llm" in processor_ref:
                  secrets = "OPENAI_API_KEY"
              elif "replicate" in processor_ref:
                  secrets = "REPLICATE_API_TOKEN"
              else:
                  secrets = ""

              # Set environment variables for this processor
              env = os.environ.copy()
              env["IMAGE_REF"] = image_ref
              env["PROCESSOR_REF"] = processor_ref
              env["TOOL_SECRETS"] = secrets

              print(f"\nüöÄ Deploying {processor_ref} with image {image_ref}")

              # Deploy to Modal
              cmd = ["modal", "deploy", "--env", os.environ["MODAL_ENVIRONMENT"], "-m", "modal_app"]
              result = subprocess.run(cmd, env=env, capture_output=True, text=True)

              if result.returncode != 0:
                  print(f"‚ùå Failed to deploy {processor_ref}")
                  print(f"STDERR: {result.stderr}")
                  exit(1)
              else:
                  print(f"‚úÖ Successfully deployed {processor_ref}")
          PY

      - name: Post-deploy smoke tests for all processors
        working-directory: code
        env:
          DJANGO_SETTINGS_MODULE: backend.settings.unittest
          MODAL_ENABLED: "true"
          MODAL_ENVIRONMENT: ${{ inputs.environment != '' && inputs.environment || github.ref_name }}
        run: |
          set -euo pipefail
          python - <<'PY'
          import yaml, json, subprocess, glob

          # Test each deployed processor
          registry_files = glob.glob("apps/core/registry/processors/*.yaml")

          for registry_file in registry_files:
              doc = yaml.safe_load(open(registry_file))
              processor_ref = doc["ref"]

              print(f"\nüß™ Testing {processor_ref}...")

              # Determine test inputs based on processor type
              if "llm" in processor_ref:
                  inputs_json = '{"schema":"v1","model":"gpt-4o-mini","params":{"messages":[{"role":"user","content":"deployment smoke test"}]},"mode":"mock"}'
              elif "replicate" in processor_ref:
                  inputs_json = '{"schema":"v1","model":"black-forest-labs/flux-schnell","params":{"prompt":"test image"},"mode":"mock"}'
              else:
                  print(f"‚ö†Ô∏è Skipping unknown processor type: {processor_ref}")
                  continue

              cmd = [
                  "python", "manage.py", "run_processor",
                  "--ref", processor_ref,
                  "--adapter", "modal",
                  "--mode", "smoke",
                  "--write-prefix", "/artifacts/outputs/smoke/{execution_id}/",
                  "--inputs-json", inputs_json,
                  "--json"
              ]

              result = subprocess.run(cmd, capture_output=True, text=True)

              if result.returncode != 0:
                  print(f"‚ùå Smoke test failed for {processor_ref}")
                  print(f"STDERR: {result.stderr}")
                  exit(1)

              # Validate response
              try:
                  payload = json.loads(result.stdout)
                  assert payload.get("status") == "success", f"Status not success: {payload}"
                  assert payload.get("execution_id"), "Missing execution_id"
                  print(f"‚úÖ {processor_ref} verified: {payload['execution_id']}")
              except (json.JSONDecodeError, AssertionError) as e:
                  print(f"‚ùå Validation failed for {processor_ref}: {e}")
                  print(f"Output: {result.stdout}")
                  exit(1)
          PY
