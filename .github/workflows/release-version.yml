name: Release Version

on:
  pull_request:
    types: [labeled]

jobs:
  create_version:
    name: "Create Version & Release"
    if: startsWith(github.event.label.name, 'release:')
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Need full history for versioning
          ref: staging  # Work from staging branch

      - name: Extract version type from label
        id: version_type
        run: |
          LABEL="${{ github.event.label.name }}"
          VERSION_TYPE="${LABEL#release:}"  # Remove "release:" prefix
          echo "type=$VERSION_TYPE" >> $GITHUB_OUTPUT
          echo "Version type: $VERSION_TYPE"

      - name: Get current version and calculate new version
        id: version
        run: |
          # Get the latest tag, default to v0.0.0 if none exists
          CURRENT_VERSION=$(git tag -l "v*" | sort -V | tail -1)
          if [ -z "$CURRENT_VERSION" ]; then
            CURRENT_VERSION="v0.0.0"
          fi

          echo "Current version: $CURRENT_VERSION"

          # Extract version numbers (remove 'v' prefix)
          VERSION_NUMBER="${CURRENT_VERSION#v}"
          IFS='.' read -r MAJOR MINOR PATCH <<< "$VERSION_NUMBER"

          # Calculate new version based on type
          case "${{ steps.version_type.outputs.type }}" in
            "major")
              NEW_MAJOR=$((MAJOR + 1))
              NEW_MINOR=0
              NEW_PATCH=0
              ;;
            "minor")
              NEW_MAJOR=$MAJOR
              NEW_MINOR=$((MINOR + 1))
              NEW_PATCH=0
              ;;
            "patch")
              NEW_MAJOR=$MAJOR
              NEW_MINOR=$MINOR
              NEW_PATCH=$((PATCH + 1))
              ;;
            *)
              echo "Invalid version type: ${{ steps.version_type.outputs.type }}"
              exit 1
              ;;
          esac

          NEW_VERSION="v${NEW_MAJOR}.${NEW_MINOR}.${NEW_PATCH}"
          echo "New version: $NEW_VERSION"
          echo "version=$NEW_VERSION" >> $GITHUB_OUTPUT

      - name: Generate release notes
        id: release_notes
        run: |
          CURRENT_VERSION=$(git tag -l "v*" | sort -V | tail -1)
          if [ -z "$CURRENT_VERSION" ]; then
            # First release - get all commits
            COMMITS=$(git log --oneline --pretty=format:"- %s" | head -20)
          else
            # Get commits since last tag
            COMMITS=$(git log ${CURRENT_VERSION}..HEAD --oneline --pretty=format:"- %s")
          fi

          # Create release notes
          cat > release_notes.md << EOF
          ## What's Changed

          $COMMITS

          ## Deployment Info
          - **Environment**: Production
          - **Build**: Validated on staging
          - **Run ID**: ${{ github.run_id }}
          - **SHA**: ${{ github.sha }}

          **Full Changelog**: https://github.com/${{ github.repository }}/compare/${CURRENT_VERSION}...${{ steps.version.outputs.version }}
          EOF

          echo "Release notes generated"

      - name: Create git tag
        run: |
          git config user.name "release-bot"
          git config user.email "release-bot@users.noreply.github.com"
          git tag -a ${{ steps.version.outputs.version }} -m "Release ${{ steps.version.outputs.version }}"
          git push origin ${{ steps.version.outputs.version }}

      - name: Create GitHub Release
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          gh release create ${{ steps.version.outputs.version }} \
            --target staging \
            --title "Release ${{ steps.version.outputs.version }}" \
            --notes-file release_notes.md \
            --latest

      - name: Update PR title with version
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          gh pr edit ${{ github.event.pull_request.number }} \
            --title "Release ${{ steps.version.outputs.version }}: Promote staging → main"

      - name: Add success comment to PR
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          gh pr comment ${{ github.event.pull_request.number }} --body "## ✅ Version Created Successfully

          **Version**: ${{ steps.version.outputs.version }}
          **Type**: ${{ steps.version_type.outputs.type }} bump
          **Release**: [View release](https://github.com/${{ github.repository }}/releases/tag/${{ steps.version.outputs.version }})

          This PR is now ready for review and merge to deploy to production."

      - name: Set success status check
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          gh api repos/${{ github.repository }}/statuses/${{ github.event.pull_request.head.sha }} \
            --method POST \
            --field state=success \
            --field target_url="https://github.com/${{ github.repository }}/releases/tag/${{ steps.version.outputs.version }}" \
            --field description="Version ${{ steps.version.outputs.version }} created successfully" \
            --field context="version-created"
