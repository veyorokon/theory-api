version: '3.8'

services:
  postgres:
    image: postgres:15
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    environment:
      POSTGRES_DB: postgres
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres_password
    networks:
      - app_network
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres -d postgres" ]
      interval: 5s
      timeout: 5s
      retries: 5
      start_period: 10s

  minio:
    image: minio/minio
    ports:
      - "9000:9000"
      - "9001:9001"
    volumes:
      - minio_data:/data
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin
    command: server /data --console-address ":9001"
    networks:
      - app_network
    healthcheck:
      test: [ "CMD", "mc", "ready", "local" ]
      interval: 5s
      timeout: 5s
      retries: 5
      start_period: 10s

  django:
    build:
      context: ./backend
      dockerfile: Dockerfile
    volumes:
      - ./backend/code:/app
    ports:
      - "8000:8000"
    environment:
      - DJANGO_SETTINGS_MODULE=backend.settings.development
      - SECRET_KEY=django-insecure-dev-key-only-for-development
      - DATABASE_URL=postgres://postgres:postgres_password@postgres:5432/postgres
      - MINIO_STORAGE_ENDPOINT=minio:9000
      - MINIO_STORAGE_ACCESS_KEY=minioadmin
      - MINIO_STORAGE_SECRET_KEY=minioadmin
      - MINIO_STORAGE_USE_HTTPS=false
      - MINIO_STORAGE_MEDIA_BUCKET_NAME=media
      - PYTHONUNBUFFERED=1
    entrypoint: [ "/bin/bash", "-c" ]
    command: [ "python manage.py migrate && echo \"from django.contrib.auth import get_user_model; User = get_user_model(); User.objects.filter(email='admin@example.com').exists() or User.objects.create_superuser('admin', 'admin@example.com', 'admin123')\" | python manage.py shell && python manage.py runserver 0.0.0.0:8000" ]
    depends_on:
      postgres:
        condition: service_healthy
      minio:
        condition: service_healthy
    networks:
      - app_network

volumes:
  postgres_data:
  minio_data:


networks:
  app_network:
    driver: bridge
