services:
  postgres:
    profiles: [ "base", "full" ]
    image: postgres:15.10
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    environment:
      POSTGRES_DB: postgres
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres_password
    networks:
      - theory_api_app_network
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres -d postgres" ]
      interval: 5s
      timeout: 5s
      retries: 5
      start_period: 10s

  minio:
    profiles: [ "full" ]
    image: quay.io/minio/minio:RELEASE.2025-01-20T14-49-07Z
    ports:
      - "9000:9000"
      - "9001:9001"
    volumes:
      - ./minio_data:/data
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin
    command: server /data --console-address ":9001"
    networks:
      theory_api_app_network:
        aliases:
          - minio.local
    healthcheck:
      test: [ "CMD", "mc", "ready", "local" ]
      interval: 5s
      timeout: 3s
      retries: 12
      start_period: 10s
  # django:
  #   build:
  #     context: .
  #     dockerfile: Dockerfile
  #   volumes:
  #     - ./code:/app
  #   ports:
  #     - "8000:8000"
  #   environment:
  #     - DJANGO_SETTINGS_MODULE=backend.settings.development
  #     - SECRET_KEY=django-insecure-dev-key-only-for-development
  #     - DATABASE_URL=postgres://postgres:postgres_password@postgres:5432/postgres
  #     - MINIO_STORAGE_ENDPOINT=minio:9000
  #     - MINIO_STORAGE_ACCESS_KEY=minioadmin
  #     - MINIO_STORAGE_SECRET_KEY=minioadmin
  #     - MINIO_STORAGE_USE_HTTPS=false
  #     - MINIO_STORAGE_MEDIA_BUCKET_NAME=media
  #     - REDIS_URL=redis://redis:6379/0
  #     - CHANNELS_REDIS_URL=redis://redis:6379/0
  #     # LLM defaults (optional; harmless if unused)
  #     - LLM_PROVIDER_DEFAULT=mock
  #     - LLM_MODEL_DEFAULT=openai/gpt-4o-mini
  #     - LLM_API_BASE=
  #     - PYTHONUNBUFFERED=1
  #   entrypoint: [ "/bin/bash", "-c" ]
  #   command:
  #     - >
  #       python manage.py migrate &&
  #       echo "from django.contrib.auth import get_user_model;U=get_user_model();U.objects.filter(email='admin@example.com').exists() or U.objects.create_superuser('admin','admin@example.com','admin123')" | python manage.py shell &&
  #       daphne -b 0.0.0.0 -p 8000 backend.asgi:application
  #   depends_on:
  #     postgres:
  #       condition: service_healthy
  #     minio:
  #       condition: service_healthy
  #     redis:
  #       condition: service_healthy
  #   networks:
  #     - app_network

volumes:
  postgres_data:
  minio_data:
  redis_data:


networks:
  theory_api_app_network:
    driver: bridge
